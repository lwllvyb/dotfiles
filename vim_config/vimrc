
" 设置 leader 映射
let g:mapleader=","
let g:maplocalleader=';'

" 基础配置
set number
set hlsearch "搜索高亮
syntax on

set pastetoggle=<F2>

" 关闭 record
map q <Nop>

inoremap jj <Esc>`^
map <C-.> <Esc>`^

" 保存文件
inoremap <leader>w <Esc>:w<cr>
noremap <leader>w :w<cr>

"  切换 buffer
nnoremap <silent> bp :bprevious<CR>
nnoremap <silent> bn :bnext<CR>
nnoremap <leader>bd :bw<CR>

" 切换windows
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" 搜索结果放置到中间
nnoremap n nzzzv
nnoremap N Nzzzv

" 设置 popup 背景
if has("mac")
elseif has("unix")
endif

" 高亮当前行
set cursorline
highlight CursorLine   cterm=NONE ctermbg=black ctermfg=NONE guibg=NONE guifg=NONE

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

com! FormatJSON %!python3 -m json.tool


call plug#begin('~/.vim/plugged')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'chxuan/vimplus-startify'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 高亮
Plug 'itchyny/vim-cursorword'
Plug 'lfv89/vim-interestingwords'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'rakr/vim-one'
Plug 'sts10/vim-pink-moon'
Plug 'joshdick/onedark.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'tpope/vim-fugitive'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'
Plug 'farmergreg/vim-lastplace'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'

Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ap/vim-buftabline'

Plug 'scrooloose/nerdcommenter'

" 创建文件插入预定义代码
Plug 'chxuan/prepare-code'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'Yggdroot/indentLine'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'ferrine/md-img-paste.vim'

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

Plug 'luochen1990/rainbow'
call plug#end()

"---------------------------------------------------------------------------------------------
map <leader>nn :NERDTreeToggle<CR>
map <leader>nf :NERDTreeFind<CR>
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && &buftype == "quickfix"|q|endif
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
aug END
"---------------------------------------------------------------------------------------------
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
command! -nargs=0 Format :call CocAction('format')
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
nn <silent> K :call CocActionAsync('doHover')<cr>
nnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>
nnoremap <silent> <leader>o  :<C-u>CocList outline<cr>
nnoremap <silent> <leader>s  :<C-u>CocList -I symbols<cr>
"---------------------------------------------------------------------------------------------

let g:session_autoload = 'yes'
let g:session_autosave = 'yes'

"---------------------------------------------------------------------------------------------
"set background=light
colorscheme onedark
let g:airline_theme='one'

"---------------------------------------------------------------------------------------------
"noremap <C-G> :<C-U><C-R>=printf("Leaderf! rg --append -e %s", expand("<cword>"))<CR><CR>
"noremap go :<C-U>Leaderf! rg --recall<CR>
noremap rr :<C-U><C-R>=printf("Leaderf mru")<CR><CR>
let g:Lf_ShortcutF = 'ff'
let g:Lf_IgnoreCurrentBufferName = 1 " 当前buffer 不显示名字
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_RootMarkers = ['.git']
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
" let g:Lf_CommandMap = {}
let g:Lf_WildIgnore = {
            \ 'dir': ['.git'],
            \ 'file': ['.gitignore', 'G*', "*.cleaned", "*.html"]
            \}

let g:Lf_NormalMap = {
	\ "File":   [["<ESC>", ':exec g:Lf_py "fileExplManager.quit()"<CR>']],
	\ "Buffer": [["<ESC>", ':exec g:Lf_py "bufExplManager.quit()"<CR>']],
	\ "Mru":    [["<ESC>", ':exec g:Lf_py "mruExplManager.quit()"<CR>']],
	\ "Tag":    [["<ESC>", ':exec g:Lf_py "tagExplManager.quit()"<CR>']],
	\ "Rg": [["<ESC>", ':exec g:Lf_py "rgExplManager.quit()"<CR>']],
	\ "Gtags":    [["<ESC>", ':exec g:Lf_py "gtagsExplManager.quit()"<CR>']],
	\ "Function":    [["<ESC>", ':exec g:Lf_py "functionExplManager.quit()"<CR>']],
	\ "Colorscheme":    [["<ESC>", ':exec g:Lf_py "colorschemeExplManager.quit()"<CR>']],
	\ }

let g:Lf_GtagsAutoGenerate = 1
let g:Lf_Gtagslabel = 'native-pygments'

"---------------------------------------------------------------------------------------------
augroup cbindings
  autocmd! cbindings
	let g:Lf_RgConfig = [
        \ "--max-columns=150",
		\ "--type={c,cpp}",
        \ "--glob=!git/*",
        \ "--hidden"
    \ ]
  autocmd Filetype cpp,c,h nmap <buffer> <silent> fr :GscopeFind c <C-R><C-W><cr>
  autocmd Filetype cpp,c,h nmap <buffer> <silent> fd :GscopeFind g <C-R><C-W><cr>
"  autocmd Filetype cpp,c,h nmap <buffer> <silent> fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
"  autocmd Filetype cpp,c,h nmap <buffer> <silent> fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
"  autocmd Filetype cpp,c,h nmap <buffer> <silent> fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
"  autocmd Filetype cpp,c,h nmap <buffer> <silent> fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
"  autocmd Filetype cpp,c,h nmap <buffer> <silent> fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
  autocmd Filetype cpp,c,h nmap <buffer> <silent> fs :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR><CR>
  set ts=4
  set shiftwidth=4
augroup end

augroup gobindings
  autocmd! gobindings
  autocmd Filetype go,python nmap <buffer> <silent> fr <Plug>(coc-references)
  autocmd Filetype go,python nmap <buffer> <silent> fd <Plug>(go-def)
  autocmd Filetype go,python nmap <buffer> <silent> fn :<C-u>CocNext<CR>
  autocmd Filetype go,python nmap <buffer> <silent> fp :<C-u>CocPrev<CR>
  autocmd Filetype go,python nmap <buffer> <silent> fo :<C-u>CocListResume<CR>
  autocmd Filetype go,python nmap <buffer> <silent> fs  :<C-u>CocList -I symbols<cr>
  autocmd Filetype go,python nmap <buffer> <silent> <leader>o :<C-u>CocList outline<CR>	
  autocmd Filetype go,python au BufWrite * :Format
  set ts=4
  set shiftwidth=4
augroup end
"---------------------------------------------------------------------------------------------

" 设置预定义代码路径
let g:prepare_code_plugin_path = expand($HOME . "/.vim/plugged/prepare-code")


"---------------------------------------------------------------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

let g:NERDCreateDefaultMappings = 0
map <leader>cc <plug>NERDCommenterToggle

" creat user map command
command! -nargs=1 Find :Leaderf! rg -e <f-args>
command! -nargs=0 Tmp :e `=tempname()`
command! -nargs=0 Bk :CocList bookmark
nmap <Leader>bb <Plug>(coc-bookmark-annotate)
nmap <Leader>bl :CocList bookmark<CR>


let g:indentLine_char_list = ['|', '¦', '┆', '┊']

autocmd FileType markdown command! -nargs=0 Pic :call mdip#MarkdownClipboardImage()
let g:mdip_imgdir = 'img'
let g:mdip_imgname = 'image'

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

let g:go_fmt_command = "goimports"
let g:go_bin_path = "/home/sankuai/go/bin"

" 创建随机颜色数量
function! Random(n)
	let g:interestingWordsTermColors = []
	let s:i = 0
	while s:i < a:n
		let timestamp = reltimestr(reltime())[-3:]
		let randomColor = float2nr(str2float(timestamp) / 300 * 100)
  		call add(g:interestingWordsTermColors, randomColor)
		let s:i+=1
	endwhile
  "return float2nr(floor(a:n * timestamp/100))
endfunction

call Random(30)

"let g:interestingWordsRandomiseColors = 1

" ludovicchabant/vim-gutentags
" 0 or s: Find this symbol
"1 or g: Find this definition
"2 or d: Find functions called by this function
"3 or c: Find functions calling this function
"4 or t: Find this text string
"6 or e: Find this egrep pattern
"7 or f: Find this file
"8 or i: Find files #including this file
"9 or a: Find places where this symbol is assigned a value
" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" enable gtags module
let g:gutentags_modules = ['gtags_cscope']

" generate datebases in my cache directory, prevent gtags files polluting my project
let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1
function Float_test(l)
	let buf = nvim_create_buf(v:false, v:true)
    call nvim_buf_set_lines(buf, 0, -1, v:true, a:l)
    let opts = {'relative': 'cursor', 'width': 10, 'height': 2, 'col': 0,
        \ 'row': 1, 'anchor': 'NW', 'style': 'minimal'}
    let win = nvim_open_win(buf, 0, opts)
    " optional: change highlight, otherwise Pmenu is used
    call nvim_win_set_option(win, 'winhl', 'Normal:MyHighlight')
endfunction
command! -nargs=0 Test :call Float_test(getqflist()) <cr>
